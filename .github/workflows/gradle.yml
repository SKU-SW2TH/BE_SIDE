name: Java CI/CD with Gradle and EC2 Deployment

on:
  push:
    branches: [ "test" ]
  pull_request:
    branches: [ "test" ]

jobs:
  # Gradle 빌드 작업
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 코드 리포지토리 체크아웃
      - uses: actions/checkout@v4

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 빌드 실행
      - name: Build with Gradle
        run: |
          cd BE_SIDE/study
          ./gradlew build

      # 빌드 결과를 업로드
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: study-jar
          path: BE_SIDE/study/build/libs/study-0.0.1-SNAPSHOT.jar

  # EC2로 배포 작업
  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      # 빌드 결과 다운로드
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: study-jar

      # AWS 자격 증명 설정
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-northeast-2'  # 서울 리전으로 설정
    
      # SSH 에이전트 설정
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}

      # EC2에서 기존 애플리케이션 종료
      - name: SSH into EC2 and stop existing application
        env:
          EC2_IP: ${{ secrets.EC2_IP }}
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} << 'EOF'
            PID=$(ps aux | grep 'study-0.0.1-SNAPSHOT.jar' | grep -v 'grep' | awk '{print $2}')
            if [ -n "$PID" ]; then
              kill -9 $PID
              echo "Application stopped successfully."
            else
              echo "No running application found."
            fi
          EOF

      # JAR 파일을 압축하여 EC2로 복사
      - name: Compress and Copy JAR to EC2
        env:
          EC2_IP: ${{ secrets.EC2_IP }}
        run: |
          tar -czf study-0.0.1-SNAPSHOT.tar.gz study-0.0.1-SNAPSHOT.jar
          scp -o StrictHostKeyChecking=no study-0.0.1-SNAPSHOT.tar.gz ubuntu@${{ env.EC2_IP }}:/home/ubuntu/

      # EC2에서 압축 해제 및 애플리케이션 실행
      - name: SSH into EC2 to Extract and Run Application
        env:
          EC2_IP: ${{ secrets.EC2_IP }}
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} << 'EOF'
            tar -xzf /home/ubuntu/study-0.0.1-SNAPSHOT.tar.gz -C /home/ubuntu/
            rm /home/ubuntu/study-0.0.1-SNAPSHOT.tar.gz
            nohup java -jar /home/ubuntu/study-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
          EOF


